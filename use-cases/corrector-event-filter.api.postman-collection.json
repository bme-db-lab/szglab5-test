{
	"variables": [],
	"info": {
		"name": "Javító - Mérések (szűrés)",
		"_postman_id": "9ae92336-4a9d-af4c-e358-a4efe31b135f",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Dátum szerinti szűrés",
			"description": "",
			"item": [
				{
					"name": "Given working token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/auth/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"loginName\": \"{{correctoruser}}\",\n\t\"password\": \"{{correctorpassword}}\"\n}"
						},
						"description": "{{url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Then I send a GET to /events?filter[datestart]=2017-03-29&filter[dateend]=2017-04-01 and it should return a JSON which contains only one event",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Returns only one event with date between 2017-03-29 and 2017-04-01\"] = responseBody.has(\"data\");"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/events?filter[datestart]=2017-03-29&filter[dateend]=2017-04-01",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Méréshely szerinti szűrés",
			"description": "",
			"item": [
				{
					"name": "Given working token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/auth/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"loginName\": \"{{correctoruser}}\",\n\t\"password\": \"{{correctorpassword}}\"\n}"
						},
						"description": "{{url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Then I send a GET to /events?filter[location]=IL105 and it should return a JSON which contains only event which is located at IL105",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Returns an event which is located at IL105\"] = responseBody.has(\"IL105\");"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/events?filter[location]=IL105",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Téma szerinti szűrés",
			"description": "",
			"item": [
				{
					"name": "Given working token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/auth/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"loginName\": \"{{correctoruser}}\",\n\t\"password\": \"{{correctorpassword}}\"\n}"
						},
						"description": "{{url}}/auth/login"
					},
					"response": []
				},
				{
					"name": "Then I send a GET to /events?filter[exercisecat]=Oracle and it should return a JSON which contains only events with type Oracle",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Returns an Oracle event\"] = responseBody.has(\"data\");"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/events?filter[exercisecat]=Oracle",
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}